plugins {
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '7.1.0'
    id 'maven-publish'
}

if (rootProject == project){
    apply plugin: "fabric-loom"
}

version = project.mod_version
group = project.maven_group

repositories {
    maven { url "https://files.minecraftforge.net/maven/" }
}

configurations {
    shade
}

loom {
    mods {
        fabricated_eventbus {
            sourceSet sourceSets.main
            configuration configurations.shade
        }
    }
}

dependencies {
    implementation 'org.jetbrains:annotations:20.1.0'

    if (rootProject == project) {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

        modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    }

    compileOnly('cpw.mods:modlauncher:10.0.+')
    testCompileOnly('cpw.mods:modlauncher:10.0.+')
    testCompileOnly('cpw.mods:securejarhandler:1.0.+')
    testCompileOnly('org.junit.jupiter:junit-jupiter-engine:5.8.+')
    testImplementation('cpw.mods:bootstraplauncher:1.1.0')
    shade implementation("net.jodah:typetools:0.8.3")
    shade implementation("org.apache.maven:maven-artifact:${project.mavenartifact_version}")
    shade implementation("com.moandjiezana.toml:toml4j:0.7.2")
    shade implementation("com.googlecode.json-simple:json-simple:1.1.1")
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    dependsOn(jar)
    configurations = [project.configurations.shade]
    archiveClassifier.set('')
}

build.dependsOn(shadowJar)

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {

    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name

    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
    }
}
